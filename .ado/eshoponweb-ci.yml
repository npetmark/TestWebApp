#NAME THE PIPELINE SAME AS FILE (WITHOUT ".yml")
# trigger:
# - main
parameters:
  - name: CustomerA                  # Case 1; Boolean type for multiple selection"
    displayName: Customer A
    type: boolean
    default: true

  - name: CustomerB
    displayName: CustomerB
    type: boolean
    default: true

  - name: CustomerC
    displayName: CustomerC
    type: boolean
    default: false

resources:
  repositories:
    - repository: self
      trigger: none

stages:
- stage: Build_ios
  dependsOn: []
  displayName: Build iOS
  jobs:
    - ${{ each parameter in parameters }}:
      - ${{ if eq(parameter.Value, true)}}:
        - job: '${{ parameter.Key }}'
          pool:
            vmImage: macOS-latest
          steps:

          - task: DotNetCoreCLI@2
            displayName: Restore
            inputs:
              command: 'restore'
              projects: '**/*.sln'
              feedsToUse: 'select'

          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: 'build'
              projects: '**/*.sln'
          
          - task: DotNetCoreCLI@2
            displayName: Test
            inputs:
              command: 'test'
              projects: 'tests/UnitTests/*.csproj'
          
          - task: DotNetCoreCLI@2
            displayName: Publish
            inputs:
              command: 'publish'
              publishWebProjects: true
              arguments: '-o $(Build.ArtifactStagingDirectory)'
          
          - task: PublishBuildArtifacts@1
            displayName: Publish Artifacts
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: '${{ parameter.Key }}_ios'
              publishLocation: 'Container'

- stage: Build_android
  dependsOn: []
  displayName: Build Android
  jobs:
    - ${{ each parameter in parameters }}:
      - ${{ if eq(parameter.Value, true)}}:
        - job: '${{ parameter.Key }}'
          pool:
            vmImage: ubuntu-latest
          steps:

          - task: DotNetCoreCLI@2
            displayName: Restore
            inputs:
              command: 'restore'
              projects: '**/*.sln'
              feedsToUse: 'select'

          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: 'build'
              projects: '**/*.sln'
          
          - task: DotNetCoreCLI@2
            displayName: Test
            inputs:
              command: 'test'
              projects: 'tests/UnitTests/*.csproj'
          
          - task: DotNetCoreCLI@2
            displayName: Publish
            inputs:
              command: 'publish'
              publishWebProjects: true
              arguments: '-o $(Build.ArtifactStagingDirectory)'
          
          - task: PublishBuildArtifacts@1
            displayName: Publish Artifacts
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: '${{ parameter.Key }}_android'
              publishLocation: 'Container'
    
- stage: CodePush
  condition: succeededOrFailed()
  dependsOn: 
    - Build_ios
    - Build_android
  displayName: CodePush
  jobs:
    - ${{ each parameter in parameters }}:
      - ${{ if eq(parameter.Value, true)}}:
        - deployment: ${{ parameter.Key}}
          environment: approvals

          pool:
            vmImage: 'windows-2019'

          strategy:
            runOnce:
              deploy:
                steps:
                  - task: DownloadBuildArtifacts@1
                    inputs:
                      buildType: 'current'
                      downloadType: 'specific'
                      itemPattern: '${{ parameter.key }}_*/*'
                      downloadPath: '$(System.ArtifactsDirectory)'
                # - task: AzureRmWebAppDeployment@4
                #   inputs:
                #     ConnectionType: 'AzureRM'
                #     azureSubscription: 'azure-connect'
                #     appType: 'webApp'
                #     WebAppName: '${{ parameter.Key }}'
                #     deployToSlotOrASE: true
                #     ResourceGroupName: 'az400m05l11-RG'
                #     SlotName: 'production'
                #     packageForLinux: '$(Build.ArtifactStagingDirectory)/**/Web.zip'
                #     enableCustomDeployment: true
                #     DeploymentType: 'webDeploy'

- stage: AppCenterDeploy
  condition: succeededOrFailed()
  dependsOn: 
    - Build_ios
    - Build_android
  displayName: AppCenterDeploy
  jobs:
    - ${{ each parameter in parameters }}:
      - ${{ if eq(parameter.Value, true)}}:
        - deployment: ${{ parameter.Key}}
          environment: approvals

          pool:
            vmImage: 'windows-2019'

          strategy:
            runOnce:
              deploy:
                steps:
                  - task: DownloadBuildArtifacts@1
                    inputs:
                      buildType: 'current'
                      downloadType: 'specific'
                      itemPattern: '${{ parameter.Key }}_*/*'
                      downloadPath: '$(System.ArtifactsDirectory)'
                # - task: AzureRmWebAppDeployment@4
                #   inputs:
                #     ConnectionType: 'AzureRM'
                #     azureSubscription: 'azure-connect'
                #     appType: 'webApp'
                #     WebAppName: '${{ parameter.Key }}'
                #     deployToSlotOrASE: true
                #     ResourceGroupName: 'az400m05l11-RG'
                #     SlotName: 'production'
                #     packageForLinux: '$(Build.ArtifactStagingDirectory)/**/Web.zip'
                #     enableCustomDeployment: true
                #     DeploymentType: 'webDeploy'
- stage: WorkItem_Mover
  dependsOn: 
    - CodePush
    - AppCenterDeploy
  displayName: Work Items Mover
  jobs:
    - ${{ each parameter in parameters }}:
      - ${{ if eq(parameter.Value, true)}}:
        - job: '${{ parameter.Key }}'
          pool:
            vmImage: ubuntu-latest
          steps:

          - task: DotNetCoreCLI@2
            displayName: Restore
            inputs:
              command: 'restore'
              projects: '**/*.sln'
              feedsToUse: 'select'