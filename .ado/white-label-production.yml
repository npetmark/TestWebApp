parameters:
  # Add a parameter for each tenant
  - name: 'PartnersPersonnel'
    displayName: 'Partners Personnel'
    type: boolean
    default: true     # Set this to 'false' if you don't want automatic builds for this tenant.

variables:
  - name: 'environment'
    value: prod
  
  - name: 'storageaccount'
    value: buzzwhitelabelprdstorage

trigger: none

stages:
  - stage: Build_iOS
    dependsOn: []
    jobs:
    - ${{ each parameter in parameters }}:
      - ${{ if eq(parameter.Value, true)}}:
        - job: ${{ parameter.Key }}
          displayName: ${{ parameter.Key }}
          timeoutInMinutes: 90
          cancelTimeoutInMinutes: 2

          pool:
            vmImage: macOS-latest
          steps:
          - checkout: self
            persistCredentials: true
            clean: true

          - task: AzureCLI@2
            displayName: 'Azure Blob Download'
            inputs:
              azureSubscription: BuzzWhiteLabelProd Azure RG
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                  $tenant = "${{ parameters.name }}"
                  $tenant = $tenant.toLower()
                  az storage blob download-batch -d $(Build.SourcesDirectory) --pattern .env.whitelabel -s $tenant --account-name $(storageaccount) --overwrite true
                  az storage blob download-batch -d $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Images.xcassets/AppIcon.appiconset --pattern iosappicon.png -s $tenant --account-name $(storageaccount) --overwrite true
                  az storage blob download-batch -d $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Images.xcassets/AppIcon.appiconset --pattern Contents.json -s $tenant --account-name $(storageaccount) --overwrite true
                  az storage blob download-batch -d $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Images.xcassets/LaunchScreen-image.imageset --pattern *.png -s $tenant-launchscreen --account-name $(storageaccount) --overwrite true
                  az storage blob download-batch -d $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Images.xcassets/LaunchScreen-image.imageset --pattern Contents.json -s $tenant-launchscreen --account-name $(storageaccount) --overwrite true
                  # az storage blob download-batch -d $(Build.SourcesDirectory)/ios --pattern GoogleService-Info.plist -s $tenant --account-name $(storageaccount) --overwrite true
                  echo "$(ls $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Images.xcassets)"

          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'BuzzWhiteLabelProd Azure RG'
              KeyVaultName: '${{ parameter.Key }}-$(environment)'
              SecretsFilter: '*'
              RunAsPreJob: true

          - script: |
                  sh change-bundle-id.sh -b $(script-para)
            displayName: 'Bundle ID fix'

          - task: NodeTool@0
            displayName: 'Use Node 16.x'
            inputs:
              versionSpec: '16.x' # you can use your desired version here

          - script: yarn install
            displayName: 'Install Dependencies'

          - script: |
                  newVer=$(jq -r ".version" package.json) 
                  # Extract new version of package.json
                  echo "##vso[task.setvariable variable=NEW_VERSION]$newVer" 
                  # Set environment variables
            displayName: 'Set Variables'

          - task: InstallAppleCertificate@2
            displayName: Install Apple Certificate
            inputs:
              certSecureFile: '${{ parameter.Key }}-$(environment).p12'     
              certPwd: '$(ios-password)'      
              keychain: 'temp'
              deleteCert: true

          - task: InstallAppleProvisioningProfile@1
            displayName: 'Install Apple Provisioning Profile'
            inputs:
              provisioningProfileLocation: 'secureFiles'
              provProfileSecureFile: '${{ parameter.Key }}-$(environment).mobileprovision' 
              removeProfile: true

          - task: CocoaPods@0
            displayName: 'Install CocoaPods'
            inputs:
              workingDirectory: 'ios'
          
         # Used in Prod only
          - script: |
                  /usr/libexec/PlistBuddy -c "Set CFBundleURLTypes:0:CFBundleURLSchemes:0 employeecompanion" $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Info.plist
                  /usr/libexec/PlistBuddy -c "Set CFBundleURLTypes:0:CFBundleURLSchemes:1 $(google-ios-app-id)" $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Info.plist
                  /usr/libexec/PlistBuddy -c "Set CFBundleURLTypes:0:CFBundleURLSchemes:2 fb$(fb-app-id)" $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Info.plist
                  /usr/libexec/PlistBuddy -c "Set FacebookAppID $(fb-app-id)" $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Info.plist
                  /usr/libexec/PlistBuddy -c "Set FacebookClientToken $(fb-client-token)" $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Info.plist
                  /usr/libexec/PlistBuddy -c "Set FacebookDisplayName $(fb-display-name)" $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Info.plist
                  /usr/libexec/PlistBuddy -c "Set GIDClientId $(gidc-client-id)" $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Info.plist
                  /usr/libexec/PlistBuddy -c "print" $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Info.plist
            displayName: 'Plist Buddy'

          - task: Xcode@5
            displayName: 'Build IPA'
            inputs:
              actions: 'clean'
              configuration: 'Release'
              sdk: 'iphoneos'
              args: 
                  NEW_VERSION=$(Build.BuildId)
                  DISPLAY_NAME="$(Customer-Name)"
                  DEVELOPMENT_TEAM="$(dev-team-id)"
                  CODEPUSH_PUBLIC_KEY="$(code-sign-public-key)"
              xcWorkspacePath: 'ios/employeecompanion.xcworkspace'
              scheme: '$(ios-command)'
              xcodeVersion: 14
              packageApp: true
              exportPath: 'output'
              signingOption: 'manual'
              signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'     
              provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'       

          - task: CopyFiles@2
            displayName: 'Copy IPA'
            inputs:
              contents: '**/*.ipa'
              targetFolder: '$(build.ArtifactStagingDirectory)'
              overWrite: true
              flattenFolders: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publish IPA to Artifacts'
            inputs:
              PathtoPublish: '$(build.ArtifactStagingDirectory)'
              ArtifactName: ${{ parameter.Key }}_ios
              publishLocation: 'Container'

  - stage: Build_Android
    dependsOn: []
    jobs:
      - ${{ each parameter in parameters }}:
        - ${{ if eq(parameter.Value, true)}}:
          - job: ${{ parameter.Key }}
            displayName: ${{ parameter.Key }}
            timeoutInMinutes: 60
            cancelTimeoutInMinutes: 2

            pool:
              vmImage: macOS-latest
            steps:
            - checkout: self
              persistCredentials: true
              clean: true

            - task: AzureCLI@2
              displayName: 'Azure Blob Download'
              inputs:
                  azureSubscription: BuzzWhiteLabelProd Azure RG
                  scriptType: pscore
                  scriptLocation: inlineScript
                  inlineScript: |
                    $tenant = "${{ parameters.name }}"
                    $tenant = $tenant.toLower()
                    az storage blob download-batch -d $(Build.SourcesDirectory) --pattern .env.whitelabel -s $tenant --account-name $(storageaccount) --overwrite true
                    cd $(Build.SourcesDirectory)/android/app/src/whitelabel/res
                    az storage blob download-batch -d $(Build.SourcesDirectory)/android/app/src/whitelabel/res/values --pattern *.xml -s $tenant --account-name $(storageaccount) --overwrite true
                    az storage blob download-batch -d $(Build.SourcesDirectory)/android/app/src/whitelabel/res --pattern drawable* -s $tenant --account-name $(storageaccount) --overwrite true
                    az storage blob download-batch -d $(Build.SourcesDirectory)/android/app/src/whitelabel/res --pattern mipmap* -s $tenant --account-name $(storageaccount) --overwrite true
                    # az storage blob download-batch -d $(Build.SourcesDirectory)/android/app/src/whitelabel --pattern google-services.json -s $tenant --account-name $(storageaccount) --overwrite true 
                    echo "$(ls -R $(Build.SourcesDirectory))"

            - task: AzureKeyVault@2
              inputs:
                  azureSubscription: 'BuzzWhiteLabelProd Azure RG'
                  KeyVaultName: '${{ parameter.Key }}-$(environment)'
                  SecretsFilter: '*'
                  RunAsPreJob: true

            - script: |
                  sh change-bundle-id.sh -b $(script-para)
              displayName: 'Bundle ID fix'

            - task: NodeTool@0
              displayName: 'Use Node 16.x'
              inputs:
                  versionSpec: '16.x'

            - task: CmdLine@2
              displayName: 'Install Dependencies'
              inputs:
                  script: yarn install

            - script: |
                  newVer=$(jq -r ".version" package.json)
                  echo "##vso[task.setvariable variable=NEW_VERSION]$newVer"
              displayName: 'Set Variables'

            - task: JavaToolInstaller@0
              inputs:
                  versionSpec: '11'
                  jdkArchitectureOption: 'x64'
                  jdkSourceOption: 'PreInstalled'

            - task: JavaToolInstaller@0
              inputs:
                  versionSpec: '11'
                  jdkArchitectureOption: 'x64'
                  jdkSourceOption: 'PreInstalled'

            - task: Gradle@3
              displayName:  'Build APK/AAB'
              inputs:
                  gradleWrapperFile: 'android/gradlew'
                  workingDirectory: 'android/'
                  options: '-PversionName=$(NEW_VERSION) -PversionCode=$(Build.BuildId) -stacktrace'
                  tasks: '$(android-command)'
                  publishJUnitResults: true
                  testResultsFiles: '**/TEST-*.xml'
                  javaHomeOption: 'JDKVersion'
                  sonarQubeRunAnalysis: false
                  spotBugsAnalysis: false

            - task: AndroidSigning@3
              inputs:
                  apkFiles: '**/build/outputs/**/*.aab'
                  apksignerKeystoreFile: '${{parameter.Key}}-$(environment).keystore'
                  apksignerKeystorePassword: '$(AndroidKeyStorePassword)'
                  apksignerKeystoreAlias: '$(AndroidKeyAlias)'
                  apksignerKeyPassword: '$(AndroidKeyAliasPassword)'
                  zipalign: true

            - task: CopyFiles@2
              inputs:
                  Contents: '**/build/outputs/**/*.aab'
                  TargetFolder: '$(build.ArtifactStagingDirectory)'

            - task: PublishBuildArtifacts@1
              inputs:
                  PathtoPublish: '$(Build.ArtifactStagingDirectory)'
                  ArtifactName: ${{ parameter.Key}}_android
                  publishLocation: 'Container'

  - stage: CodePush
    dependsOn:
      - Build_iOS
      - Build_Android
    jobs:
      - ${{ each parameter in parameters }}:
        - ${{ if eq(parameter.Value, true)}}:
          - deployment: ${{ parameter.Key}}
            environment: approvals
            displayName: ${{ parameter.Key }}
            timeoutInMinutes: 60
            cancelTimeoutInMinutes: 2
              pool:
                vmImage: 'macOS-latest'
              steps:
                - checkout: self
                  persistCredentials: true
                  clean: true

                - task: AzureCLI@2
                  displayName: 'Azure CLI'
                  inputs:
                      azureSubscription: 'BuzzWhiteLabelProd Azure RG'
                      scriptType: 'pscore'
                      scriptLocation: 'inlineScript'
                      inlineScript: |
                        $tenant = "${{ parameters.name }}"
                        $tenant = $tenant.toLower()
                        az storage blob download-batch -d $(Build.SourcesDirectory) --pattern .env.whitelabel -s $tenant --account-name $(storageaccount) --overwrite true
                        az storage blob download-batch -d $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Images.xcassets/AppIcon.appiconset --pattern iosappicon.png -s $tenant --account-name $(storageaccount) --overwrite true
                        az storage blob download-batch -d $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Images.xcassets/AppIcon.appiconset --pattern Contents.json -s $tenant --account-name $(storageaccount) --overwrite true
                        az storage blob download-batch -d $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Images.xcassets/LaunchScreen-image.imageset --pattern *.png -s $tenant-launchscreen --account-name $(storageaccount) --overwrite true
                        az storage blob download-batch -d $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Images.xcassets/LaunchScreen-image.imageset --pattern Contents.json -s $tenant-launchscreen --account-name $(storageaccount) --overwrite true
                        cd $(Build.SourcesDirectory)/android/app/src/whitelabel/res
                        az storage blob download-batch -d $(Build.SourcesDirectory)/android/app/src/whitelabel/res/values --pattern *.xml -s $tenant --account-name $(storageaccount) --overwrite true
                        az storage blob download-batch -d $(Build.SourcesDirectory)/android/app/src/whitelabel/res --pattern drawable* -s $tenant --account-name $(storageaccount) --overwrite true
                        az storage blob download-batch -d $(Build.SourcesDirectory)/android/app/src/whitelabel/res --pattern mipmap* -s $tenant --account-name $(storageaccount) --overwrite true
                        echo "$(ls $(Build.SourcesDirectory)/ios/employeecompanion/whitelabel/Images.xcassets)"

                - task: AzureKeyVault@2
                  inputs:
                    azureSubscription: 'BuzzWhiteLabelProd Azure RG'
                    KeyVaultName: '${{ parameter.Key }}-$(environment)'
                    SecretsFilter: '*'
                    RunAsPreJob: true

                - task: NodeTool@0
                  displayName: 'Use Node 16.x'
                  inputs:
                    versionSpec: 16.x

                - task: YarnInstaller@3
                  displayName: 'Install Dependencies'
                  inputs:
                    versionSpec: '1.x'

                - task: Yarn@2
                  displayName: 'Clean Cashe'
                  inputs:
                    Arguments: 'cache clean'

                - task: Yarn@2
                  displayName: 'Yarn Install'
                  inputs:
                    Arguments: install

                - task: Yarn@2
                  displayName: 'Yarn Rninfo'
                  inputs:
                    Arguments: rninfo

                - task: Yarn@2
                  displayName: 'Yarn Extrainfo'
                  inputs:
                    Arguments: extrainfo

                - task: Yarn@2
                  displayName: 'CodePush to Production'
                  inputs:
                    Arguments: 'deployCodePushWhitelabelVersion --accessToken=$(admin-tempworks-api-token) --codePushPrivateKey="$(code-sign-private-key)" --iosAppName=$(ios-appcenter-app-name) --androidAppName=$(android-appcenter-app-name)  --environment=$(environment)'

  - stage: AppCenterDistribute
    dependsOn:
      - CodePush
    jobs:
      - ${{ each parameter in parameters }}:
        - ${{ if eq(parameter.Value, true)}}:
          - job: ${{ parameter.Key }}
            displayName: ${{ parameter.Key }}
            timeoutInMinutes: 60
            cancelTimeoutInMinutes: 2

            pool:
              vmImage: 'macOS-latest'
            steps:
              - checkout: self
                persistCredentials: true
                clean: true
              
              - task: DownloadBuildArtifacts@1
                inputs:
                  buildType: 'current'
                  downloadType: 'specific'
                  itemPattern: |
                    ${{ parameter.Key }}*/**/app-*-release.aab
                    ${{ parameter.Key }}*/*.ipa
                  downloadPath: '$(System.DefaultWorkingDirectory)'

              - task: AppCenterDistribute@3
                displayName: iOS App Center Distribute
                inputs:
                  serverEndpoint: '${{ parameter.Key }}-$(environment)-WL-ios'
                  appSlug: '$(ios-appcenter-app-name)'
                  appFile: '$(System.DefaultWorkingDirectory)/**/*.ipa'
                  releaseNotesOption: 'input'
                  releaseNotesInput: '$(Build.SourceVersionMessage)'
                  destinationType: 'store'
                  destinationStoreId: '$(ios-storeid)'

              - task: AppCenterDistribute@3
                displayName: Android App Center Distribute
                inputs:
                  serverEndpoint: '${{ parameter.Key }}-$(environment)-WL-android'
                  appSlug: '$(android-appcenter-app-name)'
                  appFile: '$(System.DefaultWorkingDirectory)/**/app-*-release.aab'
                  symbolsOption: 'Android'
                  releaseNotesOption: 'input'
                  releaseNotesInput: '$(Build.SourceVersionMessage)'
                  destinationType: 'groups'
                  distributionGroupId: '$(android-distribution-id)'
